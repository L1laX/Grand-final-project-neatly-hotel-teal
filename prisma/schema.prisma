generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id              String            @id @default(cuid())
  name            String?
  username        String?           @unique
  password        String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  role            String?
  created_at      DateTime          @default(now()) @db.Timestamptz(3)
  updated_at      DateTime          @updatedAt @db.Timestamptz(3)
  accounts        account[]
  sessions        session[]
  customerBooking customerBooking[]
  userProfile     userProfile?
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model userProfile {
  id          String   @id @unique @default(uuid())
  user_id     String   @unique
  fullName    String
  id_number   String   @unique
  dateOfBirth DateTime @db.Timestamptz(3)
  country     String
  payment_id  String?
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model room {
  name            String
  size            String
  bedType         String
  status          String
  checkInDate     DateTime?         @db.Timestamptz(3)
  checkOutDate    DateTime?         @db.Timestamptz(3)
  guests          Int
  description     String
  roomMainImage   String
  pricePerNight   Int
  created_at      DateTime          @default(now()) @db.Timestamptz(3)
  last_updated_at DateTime          @updatedAt @db.Timestamptz(3)
  promotionPrice  Int?
  id              String            @id @unique @default(uuid())
  customerBooking customerBooking[]
  roomAmenity     roomAmenity[]
  roomGallery     roomGallery[]
}

model roomAmenity {
  id      String @id @unique @default(uuid())
  room_id String
  name    String
  room    room   @relation(fields: [room_id], references: [id], onDelete: Cascade)
}

model roomGallery {
  id      String @id @unique @default(uuid())
  room_id String
  image   String
  room    room   @relation(fields: [room_id], references: [id], onDelete: Cascade)
}

model customerBooking {
  id                  String           @id @unique @default(uuid())
  user_id             String
  customerName        String
  customerEmail       String
  customer_id_number  String
  customerCountry     String
  customerDateOfBirth DateTime         @db.Timestamptz(3)
  paymentType         String
  paymentStatus       String
  discount            Int?
  guestCount          Int?
  totalPrice          Int?
  additionalRequest   String?
  room_id             String?
  checkInDate         DateTime?        @db.Timestamptz(3)
  checkOutDate        DateTime?        @db.Timestamptz(3)
  promotionCode       String?
  order_id            String?
  created_at          DateTime         @default(now()) @db.Timestamptz(3)
  last_updated_at     DateTime         @updatedAt @db.Timestamptz(3)
  bookingRequest      bookingRequest[]
  room                room?            @relation(fields: [room_id], references: [id])
  user                user             @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model bookingRequest {
  id              String          @id @unique @default(uuid())
  booking_id      String
  name            String
  price           Int
  customerBooking customerBooking @relation(fields: [booking_id], references: [id], onDelete: Cascade)
}

model hotel_info {
  id               String @id @unique @default(uuid())
  hotelName        String
  image            String
  hotelDescription String
}

model promotion {
  promotionCode String
  discount      Int
  id            String @id @unique @default(uuid())
}
