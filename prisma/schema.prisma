generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  email           String            @unique
  username        String            @unique
  password        String
  role            String
  image           String?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  id              Int               @id @unique @default(autoincrement())
  customerBooking customerBooking[]
  userProfile     userProfile?
}

model userProfile {
  id          Int      @id @unique @default(autoincrement())
  user_id     Int      @unique
  fullName    String
  id_number   String   @unique
  dateOfBirth DateTime
  country     String
  user        user     @relation(fields: [user_id], references: [id])
}

model room {
  name            String
  size            String
  bedType         String
  status          String
  checkInDate     DateTime?
  checkOutDate    DateTime?
  guests          Int
  description     String
  roomMainImage   String
  pricePerNight   Int
  promotionPrice  Int?
  id              Int               @id @default(autoincrement())
  customerBooking customerBooking[]
  roomAmenity     roomAmenity[]
  roomGallery     roomGallery[]
}

model roomAmenity {
  id      Int    @id @default(autoincrement())
  room_id Int
  name    String
  room    room   @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model roomGallery {
  id      Int    @id @default(autoincrement())
  room_id Int
  image   String
  room    room   @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model customerBooking {
  id                  Int              @id @unique @default(autoincrement())
  user_id             Int
  customerName        String
  customerEmail       String
  customer_id_number  String
  customerCountry     String
  customerDateOfBirth DateTime
  paymentType         String
  paymentStatus       String
  order_id            String?
  session_id          String?
  discount            Int?
  guestCount          Int?
  totalPrice          Int?
  additionalRequest   String?
  room_id             Int?
  checkInDate         DateTime?
  checkOutDate        DateTime?
  created_at          DateTime         @default(now())
  last_updated_at     DateTime         @updatedAt
  promotionCode       String?
  bookingRequest      bookingRequest[]
  room                room?            @relation(fields: [room_id], references: [id], onDelete: SetNull)
  user                user             @relation(fields: [user_id], references: [id])
}

model bookingRequest {
  id              Int             @id @unique @default(autoincrement())
  booking_id      Int
  name            String
  price           Int
  customerBooking customerBooking @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model hotel_info {
  id               Int    @id @unique @default(autoincrement())
  hotelName        String
  image            String
  hotelDescription String
}

model promotion {
  promotionCode String
  discount      Int
  id            Int    @id @unique @default(autoincrement())
}
