generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  email           String?           @unique
  username        String?           @unique
  password        String?
  role            String?
  image           String?
  created_at      DateTime          @default(now()) @db.Timestamptz(3)
  updated_at      DateTime          @updatedAt @db.Timestamptz(3)
  id              String            @id @default(uuid())
  emailVerified   DateTime?
  name            String?
  account         account[]
  customerBooking customerBooking[]
  session         session[]
  userProfile     userProfile?
}

model userProfile {
  id          String   @id @unique @default(uuid())
  user_id     String   @unique
  id_number   String   @unique
  dateOfBirth DateTime @db.Timestamptz(3)
  country     String
  payment_id  String?
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model room {
  name                 String
  size                 String
  bedType              String
  status               String
  checkInDate          DateTime?              @db.Timestamptz(3)
  checkOutDate         DateTime?              @db.Timestamptz(3)
  guests               Int
  description          String
  roomMainImage        String
  pricePerNight        Int
  promotionPrice       Int?
  id                   String                 @id @unique @default(uuid())
  created_at           DateTime               @default(now()) @db.Timestamptz(3)
  last_updated_at      DateTime               @updatedAt @db.Timestamptz(3)
  customerBooking_room customerBooking_room[]
  roomAmenity          roomAmenity[]
  roomGallery          roomGallery[]
}

model roomAmenity {
  id      String @id @unique @default(uuid())
  room_id String
  name    String
  room    room   @relation(fields: [room_id], references: [id], onDelete: Cascade)
}

model roomGallery {
  id      String @id @unique @default(uuid())
  room_id String
  image   String
  room    room   @relation(fields: [room_id], references: [id], onDelete: Cascade)
}

model customerBooking {
  id                   String                 @id @unique @default(uuid())
  user_id              String
  customerName         String
  customerEmail        String
  customer_id_number   String
  customerCountry      String
  customerDateOfBirth  DateTime               @db.Timestamptz(3)
  paymentType          String
  paymentStatus        String
  discount             Int?
  guestCount           Int?
  totalPrice           Int?
  additionalRequest    String?
  checkInDate          DateTime?              @db.Timestamptz(3)
  checkOutDate         DateTime?              @db.Timestamptz(3)
  created_at           DateTime               @default(now()) @db.Timestamptz(3)
  last_updated_at      DateTime               @updatedAt @db.Timestamptz(3)
  promotionCode        String?
  order_id             String?
  bookingRequest       bookingRequest[]
  user                 user                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  customerBooking_room customerBooking_room[]
}

model bookingRequest {
  id              String          @id @unique @default(uuid())
  booking_id      String
  name            String
  price           Int
  customerBooking customerBooking @relation(fields: [booking_id], references: [id], onDelete: Cascade)
}

model hotel_info {
  id               String @id @unique @default(uuid())
  hotelName        String
  image            String
  hotelDescription String
}

model promotion {
  promotionCode String
  discount      Int
  id            String @id @unique @default(uuid())
  name          String
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model customerBooking_room {
  id                 String          @id @unique
  customerBooking_id String
  room_id            String
  customerBooking    customerBooking @relation(fields: [customerBooking_id], references: [id])
  room               room            @relation(fields: [room_id], references: [id])
}
